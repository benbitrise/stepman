format_version: "7"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

app:
  envs:
  - BIN_NAME: stepman

workflows:
  # ----------------------------------------------------------------
  # --- workflows for CI and testing
  test:
    title: Runs tests
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    - codecov:
        run_if: .IsCI
        inputs:
        - other_options: -f ${GO_CODE_COVERAGE_REPORT_PATH}
        - CODECOV_TOKEN: "$CODECOV_UPLOAD_TOKEN"
    - script:
        title: Run integration tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            current_stepman="$(pwd)/_tmp/test_stepman"
            go build -o "$current_stepman"

            export PR="" PULL_REQUEST_ID=""
            export INTEGRATION_TEST_BINARY_PATH="$current_stepman"
            go test -v ./_tests/integration/...

  _create-binary:
    title: creates binary for specified platform
    steps:
    - script:
        title: Create binary
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            echo "  Create binary for $DESCRIPTION"
            echo "  Build number: $BITRISE_BUILD_NUMBER"

            DEPLOY_PATH="_bin/$BIN_NAME-$OS-$ARCH"
            echo "  Create at: $DEPLOY_PATH"

            version_package="github.com/bitrise-io/stepman/version"

            go build \
              -ldflags "-X $version_package.BuildNumber=$BITRISE_BUILD_NUMBER -X $version_package.Commit=$GIT_CLONE_COMMIT_HASH" \
              -o "$DEPLOY_PATH"

            cp $DEPLOY_PATH $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH
            echo "  Copy binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH"

  create-x86-darwin-binary:
    after_run:
    - _create-binary
    envs:
    - DESCRIPTION: "x86 Darwin"
    - ARCH: "x86_64"
    - GOARCH: "amd64"
    - OS: "Darwin"
    - GOOS: "darwin"

  create-arm-darwin-binary:
    after_run:
    - _create-binary
    envs:
    - DESCRIPTION: "ARM Darwin"
    - ARCH: "arm64"
    - GOARCH: "amd64"
    - OS: "Darwin"
    - GOOS: "darwin"

  create-x86-linux-binary:
    after_run:
    - _create-binary
    envs:
    - DESCRIPTION: "x86 Linux"
    - ARCH: "x86_64"
    - GOARCH: "amd64"
    - OS: "Linux"
    - GOOS: "linux"

  create-binaries:
    title: Create binaries
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0.21: {}

    after_run:
    - create-arm-darwin-binary
    - create-x86-darwin-binary
    - create-x86-linux-binary
  
  dep-update:
    title: Dep update
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update
